version: "3.8"
services:
    frontend:
        build:
            context: ./client
            dockerfile: Dockerfile
        image: ${COMPOSE_PROJECT_NAME:?err}_frontend
        tty: true
        restart: unless-stopped
        container_name: ${COMPOSE_PROJECT_NAME:?err}_frontend
        working_dir: /app/client
        volumes:
            - ./client:/app/client
        ports:
            - "${PORT_FRONTEND}:3000"
        networks:
            - ${COMPOSE_PROJECT_NAME:?err}_network
        depends_on:
            - backend
    backend:
        build:
            context: ./server
            dockerfile: Dockerfile
        image: ${COMPOSE_PROJECT_NAME:?err}_backend
        tty: true
        restart: unless-stopped
        container_name: ${COMPOSE_PROJECT_NAME:?err}_backend
        working_dir: /app/server
        volumes:
            - ./server:/app/server
        networks:
            - ${COMPOSE_PROJECT_NAME:?err}_network
        ports:
            - "${PORT_BACKEND}:3010"
        depends_on:
            - db
            - mongo
            - redis

    # MySQL and phpMyAdmin
    db:
        image: mysql:8.0
        container_name: ${COMPOSE_PROJECT_NAME:?err}_db
        restart: unless-stopped
        command: --max_allowed_packet=32505856
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
            TZ: Asia/Dhaka
        volumes:
            - mysql-data:/var/lib/mysql
        networks:
            - ${COMPOSE_PROJECT_NAME:?err}_network
        ports:
            - "${DOCKER_DB_HOST_PORT:?err}:3306"
    phpmyadmin:
        depends_on:
            - db
        image: phpmyadmin/phpmyadmin
        restart: always
        ports:
            - "${PHP_MY_ADMIN_PORT}:80"
        environment:
            PMA_VERBOSE: "Docker MySQL,Local MySQL"
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        networks:
            - ${COMPOSE_PROJECT_NAME:?err}_network
    # MongoDB and Mongo Express
    mongo:
        image: mongo:latest
        container_name: mongodb
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:?err}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS:?err}
        ports:
            - "${MONGO_PORT}:27017"
        volumes:
            - mongodb_data:/data/db

    mongo-express:
        image: mongo-express:latest
        container_name: mongo-express
        restart: always
        ports:
            - "${MONGO_DB_UI_PORT}:8081"
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER:?err}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASS:?err}
            ME_CONFIG_MONGODB_SERVER: mongo
            ME_CONFIG_MONGODB_PORT: 27017
            ME_CONFIG_MONGODB_AUTH_DATABASE: admin
            ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_DB_ADMIN_USER:?err}
            ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_DB_ADMIN_PASS:?err}
        depends_on:
            - mongo

    redis:
        image: redis:alpine
        restart: always
        container_name: ${COMPOSE_PROJECT_NAME:?err}_redis
        ports:
            - "${DOCKER_REDIS_PORT:?err}:6379"
        networks:
            - ${COMPOSE_PROJECT_NAME:?err}_network

    rabbitmq:
        image: rabbitmq:3-management
        restart: always
        container_name: ${COMPOSE_PROJECT_NAME:?err}_rabbitmq
        ports:
            - "5672:5672" # AMQP protocol port
            - "15672:15672" # Management UI port
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - ${COMPOSE_PROJECT_NAME:?err}_network

networks:
    ecommerce_network:
        driver: bridge
volumes:
    mysql-data:
    mongodb_data:
    rabbitmq_data:
